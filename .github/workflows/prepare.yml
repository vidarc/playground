# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Linting, Testing, and Build

on:
  pull_request:
    branches: [main]

env:
  PROJECT_NUMBER: ${{ secrets.GCP_PROJECT }}
  PROJECT_ID: mattailes-151904
  SERVICE: website-pr
  REGION: us-central1

jobs:
  install:
    name: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 19
          cache: yarn
      - run: yarn install --immutable

  linting:
    needs: [install]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: linting
        uses: actions/setup-node@v3
        with:
          node-version: 19
          cache: yarn
      - run: yarn install --immutable
      - run: yarn lint

  testing:
    needs: [install]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: testing
        uses: actions/setup-node@v3
        with:
          node-version: 19
          cache: yarn
      - run: yarn install --immutable
      - run: yarn test

  build:
    needs: [install]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: build
        uses: actions/setup-node@v3
        with:
          node-version: 19
          cache: yarn
      - run: yarn install --immutable
      - run: yarn build

  docker-deploy-e2e:
    needs: [install, linting, testing, build]
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: get cache
        uses: actions/setup-node@v3
        with:
          node-version: 19
          cache: yarn
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          create_credentials_file: true
          workload_identity_provider: 'projects/${{ env.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/main/providers/github'
          service_account: 'website@mattailes-151904.iam.gserviceaccount.com'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      - name: Authorize Docker push
        run: gcloud auth configure-docker
      - name: build docker image
        run: |-
          docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{  github.sha }} .
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{  github.sha }}
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE }}
          image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{  github.sha }}
          region: ${{ env.REGION }}
      - name: Log Deployed URL
        run: echo ${{ steps.deploy.outputs.url }}
      - name: Cypress E2E
        uses: cypress-io/github-action@v4
        env:
          CYPRESS_BASE_URL: ${{ steps.deploy.outputs.url }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          browser: chrome
          record: true
          wait-on: ${{ steps.deploy.outputs.url }}

  cleanup:
    name: Clean Up
    needs: [install, linting, testing, build, docker-deploy-e2e]
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          create_credentials_file: true
          workload_identity_provider: 'projects/${{ env.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/main/providers/github'
          service_account: 'website@mattailes-151904.iam.gserviceaccount.com'
      - uses: google-github-actions/setup-gcloud@v1
      - name: Delete services
        continue-on-error: true
        run: |-
          gcloud config set run/platform managed
          gcloud config set run/region ${{ env.REGION }}
          gcloud run services delete ${{ env.SERVICE }} --quiet
