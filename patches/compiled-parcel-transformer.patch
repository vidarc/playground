diff --git a/dist/transformer.js b/dist/transformer.js
index 883afc05ad7e267182ed9f7a3159a060d3236a89..d25e25e479932d9c8cff2dafc8d1f6adbae43b63 100644
--- a/dist/transformer.js
+++ b/dist/transformer.js
@@ -22,11 +22,11 @@ exports.default = new plugin_1.Transformer({
         });
         const contents = {};
         if (conf) {
-            config.shouldInvalidateOnStartup();
+            config.invalidateOnStartup();
             Object.assign(contents, conf.contents);
         }
         // We always set a result so it's only evaluated once.
-        config.setResult(contents);
+        return contents;
     },
     canReuseAST() {
         // Compiled should run before any other JS transformer.
@@ -79,7 +79,7 @@ exports.default = new plugin_1.Transformer({
             // Included files are those which have been statically evaluated into this asset.
             // This tells parcel that if any of those files change this asset should be transformed
             // again.
-            asset.addIncludedFile(file);
+            asset.invalidateOnFileChange(file);
         });
         if (result === null || result === void 0 ? void 0 : result.ast) {
             asset.setAST({
@@ -92,13 +92,14 @@ exports.default = new plugin_1.Transformer({
         }
         return [asset];
     },
-    generate({ ast, asset }) {
+    async generate({ ast, asset }) {
         // TODO: We're using babels standard generator. Internally parcel does some hacks in
         // the official Babel transformer to make it faster - using ASTree directly.
         // Perhaps we should do the same thing.
-        const { code, map } = generator_1.default(ast.program, {
+        const { code } = generator_1.default(ast.program, {
             filename: asset.filePath,
         });
+        const map = await asset.getMap();
         return { content: code, map };
     },
 });
